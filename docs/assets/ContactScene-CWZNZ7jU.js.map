{"version":3,"file":"ContactScene-CWZNZ7jU.js","sources":["../../contact/Pedestal.jsx","../../contact/ContactScene.jsx"],"sourcesContent":["import { useGLTF } from '@react-three/drei';\r\nimport { clone } from 'three/examples/jsm/utils/SkeletonUtils.js';\r\n\r\n/**\r\n * Returns a pedestal object in 3D space.\r\n * @param {*} props Additional properties passed to the component, which are applied to the mesh.\r\n * @returns A 3d pedestal object component.\r\n */\r\nfunction Pedestal({ ...props })\r\n{   \r\n    const pedestalModel = useGLTF(`/models/pedestal/pedestal.glb`);\r\n    const clonedPedestal = clone(pedestalModel.scene);\r\n\r\n    return (\r\n        <primitive object={clonedPedestal} {...props}/>\r\n    )\r\n}\r\n\r\nexport default Pedestal;","import {\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport TitleText3D from \"../utils/TitleText3D.jsx\";\r\nimport { handleClick, animateIn, animateOut } from \"../utils/Helpers.jsx\";\r\nimport { useThree } from \"@react-three/fiber\";\r\nimport { folder, useControls } from \"leva\";\r\nimport Pedestal from \"./Pedestal\";\r\nimport Logo from \"./Logo\";\r\nimport gsap from \"gsap\";\r\n\r\n/**\r\n * Creates the scene for contacting me!\r\n * It contains 3 pedestals and some logos\r\n * which go to the corresponding site.\r\n */\r\nconst ContactScene = forwardRef((_props, ref) => {\r\n  /*\r\n   * States, refs\r\n  */\r\n\r\n  // State for animation\r\n  const scene = useRef();\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n  // Grab camera from useThree for gsap animation\r\n  const { camera } = useThree();\r\n\r\n  // Forwarding the ref, used to trigger animations in experience.jsx\r\n  useImperativeHandle(ref, () => ({\r\n    // Used to tell whether the scene is hidden or not\r\n    scale: scene.current.scale,\r\n\r\n    // Toggle the in/out animation\r\n    toggleAnimateOut: () => {\r\n      toggleAnimation(scene, camera, isAnimating, setIsAnimating);\r\n    },\r\n\r\n    // Toggle scene vis without the animation\r\n    toggleOut: () => {\r\n      ToggleNoAnimation(scene, isAnimating, setIsAnimating);\r\n    },\r\n  }),[]);\r\n\r\n  /*\r\n   * Leva Controls\r\n  */\r\n  const {\r\n        sp_x, sp_y, sp_z,\r\n        sr_x, sr_y, sr_z,\r\n        ped_x, ped_y, ped_z,\r\n        pedr_x, pedr_y, pedr_z,\r\n        txt_x, txt_y, txt_z,\r\n    } = useControls(\r\n    \"Contact Scene\",\r\n    {\r\n      \"Scene Position\": folder(\r\n        { sp_x: 0.0, sp_y: 0.0, sp_z: -0.2 },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Scene rotation\": folder(\r\n        { sr_x: -0.11, sr_y: 1.0, sr_z: 0 },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Pedestals Position\": folder(\r\n        { ped_x: 0, ped_y: -0.8, ped_z: 0.01 },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Pedestals Rotation\": folder(\r\n        { pedr_x: 0.0, pedr_y: 0.01, pedr_z: 0 },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Title Text Position\": folder(\r\n        { txt_x: 1.38, txt_y: 1.6, txt_z: -0.01 },\r\n        { collapsed: true }\r\n      ),\r\n    },\r\n    { collapsed: true }\r\n  );\r\n\r\n  /*\r\n   * Point light\r\n   */\r\n\r\n  // Ref for the point light\r\n  const pointLightRef = useRef();\r\n\r\n  /*\r\n   * Logos\r\n   */\r\n\r\n  // Github logo\r\n  const githubLogo = useRef();\r\n\r\n  // LinkedIn logo\r\n  const linkedinLogo = useRef();\r\n\r\n  // Email logo\r\n  const emailLogo = useRef();\r\n\r\n  // State for focusing the logo\r\n  const [focusedLogo, setFocusedLogo] = useState(\"none\");\r\n\r\n  // Change animations when logo is focused\r\n  useEffect(() => {\r\n    switch (focusedLogo) {\r\n      case \"none\":\r\n        if (linkedinLogo.current && emailLogo.current && githubLogo.current) {\r\n          animateOut([linkedinLogo, emailLogo, githubLogo]);\r\n        }\r\n\r\n        // Reset the light\r\n        if (pointLightRef.current) {\r\n          gsap.to(pointLightRef.current.color, {\r\n            duration: 0.3,\r\n            r: 3,\r\n            g: 3,\r\n            b: 3,\r\n            ease: \"power4.inOut\",\r\n          });\r\n        }\r\n        break;\r\n\r\n      case \"linkedin\":\r\n        animateOut([emailLogo, githubLogo]);\r\n        animateIn([linkedinLogo]);\r\n\r\n        // Change the light color\r\n        gsap.to(pointLightRef.current.color, {\r\n          duration: 0.3,\r\n          r: 5,\r\n          g: 10,\r\n          b: 100,\r\n          ease: \"power4.inOut\",\r\n        });\r\n        break;\r\n\r\n      case \"github\":\r\n        animateOut([emailLogo, linkedinLogo]);\r\n        animateIn([githubLogo]);\r\n\r\n        // Change the light color\r\n        gsap.to(pointLightRef.current.color, {\r\n          duration: 0.3,\r\n          r: 54,\r\n          g: 1,\r\n          b: 63,\r\n          ease: \"power4.inOut\",\r\n        });\r\n        break;\r\n\r\n      case \"email\":\r\n        animateOut([linkedinLogo, githubLogo]);\r\n        animateIn([emailLogo]);\r\n\r\n        // Change the light color\r\n        gsap.to(pointLightRef.current.color, {\r\n          duration: 0.3,\r\n          r: 50,\r\n          g: 2,\r\n          b: 4,\r\n          ease: \"power4.inOut\",\r\n        });\r\n      default:\r\n        break;\r\n    }\r\n  }, [focusedLogo]);\r\n\r\n  // State for recent click (to prevent users from spamming the link)\r\n  const [recentClick, setRecentClick] = useState(false);\r\n\r\n  // Return value (here for legibility) ****************************************************\r\n  return (\r\n    <group\r\n      ref={scene}\r\n      scale={0}\r\n      visible={false}\r\n      position={[sp_x, sp_y, sp_z]}\r\n      rotation={[sr_x, sr_y, sr_z]}\r\n    >\r\n      {/* Pedestals */}\r\n      <group\r\n        position={[ped_x, ped_y, ped_z]}\r\n        rotation={[pedr_x, pedr_y, pedr_z]}\r\n        scale={0.1}\r\n      >\r\n        <Pedestal position={[0, 0, -20]} />\r\n        <Pedestal />\r\n        <Pedestal position={[0, 0, 20]} />\r\n      </group>\r\n\r\n      {/* Logos arranged from left to right */}\r\n      {/* linkedIn logo */}\r\n      <Logo\r\n        ref={linkedinLogo}\r\n        kind={\"linkedin\"}\r\n        position={[-0.1, 0.9, -2]}\r\n        onClick={() =>\r\n          handleClick(\r\n            \"https://www.linkedin.com/in/eli-parker-a96338302/\",\r\n            recentClick,\r\n            setRecentClick\r\n          )\r\n        }\r\n        onPointerEnter={() => setFocusedLogo(\"linkedin\")}\r\n        onPointerLeave={() => setFocusedLogo(\"none\")}\r\n      />\r\n      {/* Email Logo */}\r\n      <Logo\r\n        ref={emailLogo}\r\n        kind={\"email\"}\r\n        position={[-0.1, 0.9, 2]}\r\n        onClick={() =>\r\n          handleClick(\r\n            \"mailto:eliparkdev@icloud.com\",\r\n            recentClick,\r\n            setRecentClick\r\n          )\r\n        }\r\n        onPointerEnter={() => setFocusedLogo(\"email\")}\r\n        onPointerLeave={() => setFocusedLogo(\"none\")}\r\n      />\r\n      {/* Github logo */}\r\n      <Logo\r\n        ref={githubLogo}\r\n        kind={\"github\"}\r\n        position={[-0.1, 0.9, 0]}\r\n        onClick={() =>\r\n          handleClick(\r\n            \"https://github.com/eli-parker/\",\r\n            recentClick,\r\n            setRecentClick\r\n          )\r\n        }\r\n        onPointerEnter={() => setFocusedLogo(\"github\")}\r\n        onPointerLeave={() => setFocusedLogo(\"none\")}\r\n      />\r\n\r\n      {/* Get In Touch Text */}\r\n      <TitleText3D\r\n        title=\"Get In Touch\"\r\n        position={[txt_x, txt_y, txt_z]}\r\n        scale={5}\r\n        rotation={[0, -Math.PI / 2, 0]}\r\n        useStandard\r\n      />\r\n\r\n      {/* Light */}\r\n      <pointLight\r\n        ref={pointLightRef}\r\n        color={\"rgb(255, 255, 255)\"}\r\n        position={[-1, 1.5, 0]}\r\n        intensity={0.5}\r\n        distance={4}\r\n        decay={0.9}\r\n      />\r\n    </group>\r\n  );\r\n});\r\n\r\nexport default ContactScene;\r\n\r\n// Helper functions ****\r\n\r\n/**\r\n * Toggles the animation in and out for the scene.\r\n * @param {Object} scene The scene to animate\r\n * @param {THREE.Camera} camera the scene camera, used in GSAP animations\r\n * @param {boolean} isAnimating The state of the animation\r\n * @param {Function} setIsAnimating The function to set the state of the animation\r\n */\r\nfunction toggleAnimation(scene, camera, isAnimating, setIsAnimating) {\r\n  // stop animation from being called multiple times\r\n  if (isAnimating) return;\r\n\r\n  // Set the state to animating\r\n  setIsAnimating(true);\r\n\r\n  // Toggle visibility\r\n  scene.current.visible = true;\r\n\r\n  // True if the scene is already animated in, meaning we want to animate out\r\n  const animatedIn = scene.current.scale.x === 1;\r\n\r\n  // Toggle scale\r\n  const targetScale = animatedIn ? { x: 0, y: 0, z: 0 } : { x: 1, y: 1, z: 1 };\r\n\r\n  // Animate out if the scene is already animated in\r\n  if (animatedIn) {\r\n    gsap.to(scene.current.scale, {\r\n      duration: 0.5,\r\n      x: targetScale.x,\r\n      y: targetScale.y,\r\n      z: targetScale.z,\r\n      ease: \"elastic.out(1,1)\",\r\n      onUpdate: () => {\r\n        camera.updateProjectionMatrix();\r\n      },\r\n      // Hide the scene when the animation is complete\r\n      onComplete: () => {\r\n        if (targetScale.x === 0) {\r\n          scene.current.visible = false;\r\n        }\r\n        setIsAnimating(false);\r\n      },\r\n    });\r\n  } else {\r\n    gsap.to(scene.current.scale, {\r\n      duration: 0.5,\r\n      x: targetScale.x,\r\n      y: targetScale.y,\r\n      z: targetScale.z,\r\n      ease: \"elastic.out(1,0.5)\",\r\n      onUpdate: () => {\r\n        camera.updateProjectionMatrix();\r\n      },\r\n      // Hide the scene when the animation is complete\r\n      onComplete: () => {\r\n        if (targetScale.x === 0) {\r\n          scene.current.visible = false;\r\n        }\r\n        setIsAnimating(false);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Toggles the scene without the animation.\r\n * @param {Object} scene the scene to toggle\r\n * @param {boolean} isAnimating The state of the animation\r\n * @param {Function} setIsAnimating Function to set the state of the animation\r\n */\r\nfunction ToggleNoAnimation(scene, isAnimating, setIsAnimating) {\r\n  // stop animation from being called multiple times\r\n  if (isAnimating) return;\r\n\r\n  // Set the state to animating\r\n  setIsAnimating(true);\r\n\r\n  // Toggle visibility\r\n  scene.current.visible = true;\r\n\r\n  // Toggle scale\r\n  if (scene.current.scale.x > 0) {\r\n    scene.current.scale.x = 0;\r\n    scene.current.scale.y = 0;\r\n    scene.current.scale.z = 0;\r\n\r\n    // If the scale is 0, hide the scene\r\n    scene.current.visible = false;\r\n  } else {\r\n    scene.current.scale.x = 1;\r\n    scene.current.scale.y = 1;\r\n    scene.current.scale.z = 1;\r\n  }\r\n\r\n  // Set the state to not animating\r\n  setIsAnimating(false);\r\n}\r\n"],"names":["Pedestal","props","pedestalModel","useGLTF","clonedPedestal","clone","jsx","ContactScene","forwardRef","_props","ref","scene","useRef","isAnimating","setIsAnimating","useState","camera","useThree","useImperativeHandle","toggleAnimation","ToggleNoAnimation","sp_x","sp_y","sp_z","sr_x","sr_y","sr_z","ped_x","ped_y","ped_z","pedr_x","pedr_y","pedr_z","txt_x","txt_y","txt_z","useControls","folder","pointLightRef","githubLogo","linkedinLogo","emailLogo","focusedLogo","setFocusedLogo","useEffect","animateOut","gsap","animateIn","recentClick","setRecentClick","jsxs","Logo","handleClick","TitleText3D","animatedIn","targetScale"],"mappings":"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"}