{"version":3,"file":"ProjectsScene-C5J4QAk1.js","sources":["../../../node_modules/three-stdlib/postprocessing/Pass.js","../../../node_modules/@react-three/drei/core/shaderMaterial.js","../../../node_modules/@react-three/drei/helpers/constants.js","../../../node_modules/@react-three/drei/core/Fbo.js","../../../node_modules/@react-three/drei/core/useIntersect.js","../../../node_modules/@react-three/drei/core/RenderTexture.js","../../../node_modules/@react-three/drei/core/MeshPortalMaterial.js","../../projects/DescriptionText3D.jsx","../../projects/ProjectsScene.jsx"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport { OrthographicCamera, PlaneGeometry, Mesh } from \"three\";\nclass Pass {\n  constructor() {\n    // if set to true, the pass is processed by the composer\n    __publicField(this, \"enabled\", true);\n    // if set to true, the pass indicates to swap read and write buffer after rendering\n    __publicField(this, \"needsSwap\", true);\n    // if set to true, the pass clears its buffer before rendering\n    __publicField(this, \"clear\", false);\n    // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n    __publicField(this, \"renderToScreen\", false);\n  }\n  setSize(width, height) {\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n  }\n  dispose() {\n  }\n}\nclass FullScreenQuad {\n  constructor(material) {\n    __publicField(this, \"camera\", new OrthographicCamera(-1, 1, 1, -1, 0, 1));\n    __publicField(this, \"geometry\", new PlaneGeometry(2, 2));\n    __publicField(this, \"mesh\");\n    this.mesh = new Mesh(this.geometry, material);\n  }\n  get material() {\n    return this.mesh.material;\n  }\n  set material(value) {\n    this.mesh.material = value;\n  }\n  dispose() {\n    this.mesh.geometry.dispose();\n  }\n  render(renderer) {\n    renderer.render(this.mesh, this.camera);\n  }\n}\nexport {\n  FullScreenQuad,\n  Pass\n};\n//# sourceMappingURL=Pass.js.map\n","import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  const material = class material extends THREE.ShaderMaterial {\n    constructor(parameters = {}) {\n      const entries = Object.entries(uniforms);\n      // Create unforms and shaders\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return {\n            ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      });\n      // Create getter/setters\n      this.key = '';\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n\n      // Assign parameters, this might include uniforms\n      Object.assign(this, parameters);\n      // Call onInit\n      if (onInit) onInit(this);\n    }\n  };\n  material.key = THREE.MathUtils.generateUUID();\n  return material;\n}\n\nexport { shaderMaterial };\n","import { REVISION } from 'three';\n\nconst getVersion = () => parseInt(REVISION.replace(/\\D+/g, ''));\nconst version = /* @__PURE__ */getVersion();\n\nexport { version };\n","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\n\n// TODO: consume this from three >r154 when SemVer allows\n\n// 👇 uncomment when TS version supports function overloads\n// export function useFBO(settings?: FBOSettings)\nfunction useFBO(/** Width in pixels, or settings (will render fullscreen by default) */\nwidth, /** Height in pixels */\nheight, /**Settings */\nsettings) {\n  const size = useThree(state => state.size);\n  const viewport = useThree(state => state.viewport);\n  const _width = typeof width === 'number' ? width : size.width * viewport.dpr;\n  const _height = typeof height === 'number' ? height : size.height * viewport.dpr;\n  const _settings = (typeof width === 'number' ? settings : width) || {};\n  const {\n    samples = 0,\n    depth,\n    ...targetSettings\n  } = _settings;\n  const target = React.useMemo(() => {\n    const target = new THREE.WebGLRenderTarget(_width, _height, {\n      minFilter: THREE.LinearFilter,\n      magFilter: THREE.LinearFilter,\n      type: THREE.HalfFloatType,\n      ...targetSettings\n    });\n    if (depth) {\n      target.depthTexture = new THREE.DepthTexture(_width, _height, THREE.FloatType);\n    }\n    target.samples = samples;\n    return target;\n  }, []);\n  React.useLayoutEffect(() => {\n    target.setSize(_width, _height);\n    if (samples) target.samples = samples;\n  }, [samples, target, _width, _height]);\n  React.useEffect(() => {\n    return () => target.dispose();\n  }, []);\n  return target;\n}\nconst Fbo = ({\n  children,\n  width,\n  height,\n  ...settings\n}) => {\n  const target = useFBO(width, height, settings);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(target));\n};\n\nexport { Fbo, useFBO };\n","import * as React from 'react';\nimport { addEffect, addAfterEffect } from '@react-three/fiber';\n\nfunction useIntersect(onChange) {\n  const ref = React.useRef(null);\n  const check = React.useRef(false);\n  const temp = React.useRef(false);\n  const callback = React.useRef(onChange);\n  React.useLayoutEffect(() => void (callback.current = onChange), [onChange]);\n  React.useEffect(() => {\n    const obj = ref.current;\n    if (obj) {\n      // Stamp out frustum check pre-emptively\n      const unsub1 = addEffect(() => {\n        check.current = false;\n        return true;\n      });\n      // If the object is inside the frustum three will call onRender\n      const oldOnRender = obj.onBeforeRender;\n      obj.onBeforeRender = () => check.current = true;\n      // Compare the check value against the temp value, if it differs set state\n      const unsub2 = addAfterEffect(() => {\n        if (check.current !== temp.current) callback.current == null || callback.current(temp.current = check.current);\n        return true;\n      });\n      return () => {\n        obj.onBeforeRender = oldOnRender;\n        unsub1();\n        unsub2();\n      };\n    }\n  }, []);\n  return ref;\n}\n\nexport { useIntersect };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { useThree, createPortal, useFrame } from '@react-three/fiber';\nimport { useFBO } from './Fbo.js';\n\nconst RenderTexture = /* @__PURE__ */React.forwardRef(({\n  children,\n  compute,\n  width,\n  height,\n  samples = 8,\n  renderPriority = 0,\n  eventPriority = 0,\n  frames = Infinity,\n  stencilBuffer = false,\n  depthBuffer = true,\n  generateMipmaps = false,\n  ...props\n}, forwardRef) => {\n  const {\n    size,\n    viewport\n  } = useThree();\n  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {\n    samples,\n    stencilBuffer,\n    depthBuffer,\n    generateMipmaps\n  });\n  const [vScene] = React.useState(() => new THREE.Scene());\n  const uvCompute = React.useCallback((event, state, previous) => {\n    var _fbo$texture, _previous$previousRoo;\n    // Since this is only a texture it does not have an easy way to obtain the parent, which we\n    // need to transform event coordinates to local coordinates. We use r3f internals to find the\n    // next Object3D.\n    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;\n    while (parent && !(parent instanceof THREE.Object3D)) {\n      parent = parent.__r3f.parent;\n    }\n    if (!parent) return false;\n    // First we call the previous state-onion-layers compute, this is what makes it possible to nest portals\n    if (!previous.raycaster.camera) previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());\n    // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n    const [intersection] = previous.raycaster.intersectObject(parent);\n    if (!intersection) return false;\n    // We take that hits uv coords, set up this layers raycaster, et voilà, we have raycasting on arbitrary surfaces\n    const uv = intersection.uv;\n    if (!uv) return false;\n    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);\n  }, []);\n  React.useImperativeHandle(forwardRef, () => fbo.texture, [fbo]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, createPortal(/*#__PURE__*/React.createElement(Container, {\n    renderPriority: renderPriority,\n    frames: frames,\n    fbo: fbo\n  }, children, /*#__PURE__*/React.createElement(\"group\", {\n    onPointerOver: () => null\n  })), vScene, {\n    events: {\n      compute: compute || uvCompute,\n      priority: eventPriority\n    }\n  }), /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: fbo.texture\n  }, props)));\n});\n\n// The container component has to be separate, it can not be inlined because \"useFrame(state\" when run inside createPortal will return\n// the portals own state which includes user-land overrides (custom cameras etc), but if it is executed in <RenderTexture>'s render function\n// it would return the default state.\nfunction Container({\n  frames,\n  renderPriority,\n  children,\n  fbo\n}) {\n  let count = 0;\n  let oldAutoClear;\n  let oldXrEnabled;\n  let oldRenderTarget;\n  let oldIsPresenting;\n  useFrame(state => {\n    if (frames === Infinity || count < frames) {\n      oldAutoClear = state.gl.autoClear;\n      oldXrEnabled = state.gl.xr.enabled;\n      oldRenderTarget = state.gl.getRenderTarget();\n      oldIsPresenting = state.gl.xr.isPresenting;\n      state.gl.autoClear = true;\n      state.gl.xr.enabled = false;\n      state.gl.xr.isPresenting = false;\n      state.gl.setRenderTarget(fbo);\n      state.gl.render(state.scene, state.camera);\n      state.gl.setRenderTarget(oldRenderTarget);\n      state.gl.autoClear = oldAutoClear;\n      state.gl.xr.enabled = oldXrEnabled;\n      state.gl.xr.isPresenting = oldIsPresenting;\n      count++;\n    }\n  }, renderPriority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n}\n\nexport { RenderTexture };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as THREE from 'three';\nimport * as React from 'react';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { useIntersect } from './useIntersect.js';\nimport { useFBO } from './Fbo.js';\nimport { RenderTexture } from './RenderTexture.js';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { FullScreenQuad } from 'three-stdlib';\nimport { version } from '../helpers/constants.js';\n\nconst PortalMaterialImpl = /* @__PURE__ */shaderMaterial({\n  blur: 0,\n  map: null,\n  sdf: null,\n  blend: 0,\n  size: 0,\n  resolution: /* @__PURE__ */new THREE.Vector2()\n}, `varying vec2 vUv;\n   void main() {\n     gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n     vUv = uv;\n   }`, `uniform sampler2D sdf;\n   uniform sampler2D map;\n   uniform float blur;\n   uniform float size;\n   uniform float time;\n   uniform vec2 resolution;\n   varying vec2 vUv;\n   #include <packing>\n   void main() {\n     vec2 uv = gl_FragCoord.xy / resolution.xy;\n     vec4 t = texture2D(map, uv);\n     float k = blur;\n     float d = texture2D(sdf, vUv).r/size;\n     float alpha = 1.0 - smoothstep(0.0, 1.0, clamp(d/k + 1.0, 0.0, 1.0));\n     gl_FragColor = vec4(t.rgb, blur == 0.0 ? t.a : t.a * alpha);\n     #include <tonemapping_fragment>\n     #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n   }`);\nconst MeshPortalMaterial = /* @__PURE__ */React.forwardRef(({\n  children,\n  events = undefined,\n  blur = 0,\n  eventPriority = 0,\n  renderPriority = 0,\n  worldUnits = false,\n  resolution = 512,\n  ...props\n}, fref) => {\n  extend({\n    PortalMaterialImpl\n  });\n  const ref = React.useRef(null);\n  const {\n    scene,\n    gl,\n    size,\n    viewport,\n    setEvents\n  } = useThree();\n  const maskRenderTarget = useFBO(resolution, resolution);\n  const [priority, setPriority] = React.useState(0);\n  useFrame(() => {\n    // If blend is > 0 then the portal is being entered, the render-priority must change\n    const p = ref.current.blend > 0 ? Math.max(1, renderPriority) : 0;\n    if (priority !== p) setPriority(p);\n  });\n  React.useEffect(() => {\n    if (events !== undefined) setEvents({\n      enabled: !events\n    });\n  }, [events]);\n  const [visible, setVisible] = React.useState(true);\n  // See if the parent mesh is in the camera frustum\n  const parent = useIntersect(setVisible);\n  React.useLayoutEffect(() => {\n    var _ref$current;\n    // Since the ref above is not tied to a mesh directly (we're inside a material),\n    // it has to be tied to the parent mesh here\n    parent.current = (_ref$current = ref.current) == null ? void 0 : _ref$current.__r3f.parent;\n  }, []);\n  React.useLayoutEffect(() => {\n    if (!parent.current) return;\n\n    // Apply the SDF mask only once\n    if (blur && ref.current.sdf === null) {\n      const tempMesh = new THREE.Mesh(parent.current.geometry, new THREE.MeshBasicMaterial());\n      const boundingBox = new THREE.Box3().setFromBufferAttribute(tempMesh.geometry.attributes.position);\n      const orthoCam = new THREE.OrthographicCamera(boundingBox.min.x * (1 + 2 / resolution), boundingBox.max.x * (1 + 2 / resolution), boundingBox.max.y * (1 + 2 / resolution), boundingBox.min.y * (1 + 2 / resolution), 0.1, 1000);\n      orthoCam.position.set(0, 0, 1);\n      orthoCam.lookAt(0, 0, 0);\n      gl.setRenderTarget(maskRenderTarget);\n      gl.render(tempMesh, orthoCam);\n      const sg = makeSDFGenerator(resolution, resolution, gl);\n      const sdf = sg(maskRenderTarget.texture);\n      const readSdf = new Float32Array(resolution * resolution);\n      gl.readRenderTargetPixels(sdf, 0, 0, resolution, resolution, readSdf);\n      // Get smallest value in sdf\n      let min = Infinity;\n      for (let i = 0; i < readSdf.length; i++) {\n        if (readSdf[i] < min) min = readSdf[i];\n      }\n      min = -min;\n      ref.current.size = min;\n      ref.current.sdf = sdf.texture;\n      gl.setRenderTarget(null);\n    }\n  }, [resolution, blur]);\n  React.useImperativeHandle(fref, () => ref.current);\n  const compute = React.useCallback((event, state, previous) => {\n    var _ref$current2;\n    if (!parent.current) return false;\n    state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n    state.raycaster.setFromCamera(state.pointer, state.camera);\n    if (((_ref$current2 = ref.current) == null ? void 0 : _ref$current2.blend) === 0) {\n      // We run a quick check against the parent, if it isn't hit there's no need to raycast at all\n      const [intersection] = state.raycaster.intersectObject(parent.current);\n      if (!intersection) {\n        // Cancel out the raycast camera if the parent mesh isn't hit\n        state.raycaster.camera = undefined;\n        return false;\n      }\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"portalMaterialImpl\", _extends({\n    ref: ref,\n    blur: blur,\n    blend: 0,\n    resolution: [size.width * viewport.dpr, size.height * viewport.dpr],\n    attach: \"material\"\n  }, props), /*#__PURE__*/React.createElement(RenderTexture, {\n    attach: \"map\",\n    frames: visible ? Infinity : 0,\n    eventPriority: eventPriority,\n    renderPriority: renderPriority,\n    compute: compute\n  }, children, /*#__PURE__*/React.createElement(ManagePortalScene, {\n    events: events,\n    rootScene: scene,\n    priority: priority,\n    material: ref,\n    worldUnits: worldUnits\n  })));\n});\nfunction ManagePortalScene({\n  events = undefined,\n  rootScene,\n  material,\n  priority,\n  worldUnits\n}) {\n  const scene = useThree(state => state.scene);\n  const setEvents = useThree(state => state.setEvents);\n  const buffer1 = useFBO();\n  const buffer2 = useFBO();\n  React.useLayoutEffect(() => {\n    scene.matrixAutoUpdate = false;\n  }, []);\n  React.useEffect(() => {\n    if (events !== undefined) setEvents({\n      enabled: events\n    });\n  }, [events]);\n  const [quad, blend] = React.useMemo(() => {\n    // This fullscreen-quad is used to blend the two textures\n    const blend = {\n      value: 0\n    };\n    const quad = new FullScreenQuad(new THREE.ShaderMaterial({\n      uniforms: {\n        a: {\n          value: buffer1.texture\n        },\n        b: {\n          value: buffer2.texture\n        },\n        blend\n      },\n      vertexShader: /*glsl*/`\n          varying vec2 vUv;\n          void main() {\n            vUv = uv;\n            gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n          }`,\n      fragmentShader: /*glsl*/`\n          uniform sampler2D a;\n          uniform sampler2D b;\n          uniform float blend;\n          varying vec2 vUv;\n          #include <packing>\n          void main() {\n            vec4 ta = texture2D(a, vUv);\n            vec4 tb = texture2D(b, vUv);\n            gl_FragColor = mix(tb, ta, blend);\n            #include <tonemapping_fragment>\n            #include <${version >= 154 ? 'colorspace_fragment' : 'encodings_fragment'}>\n          }`\n    }));\n    return [quad, blend];\n  }, []);\n  useFrame(state => {\n    var _material$current;\n    let parent = material == null || (_material$current = material.current) == null ? void 0 : _material$current.__r3f.parent;\n    if (parent) {\n      // Move portal contents along with the parent if worldUnits is true\n      if (!worldUnits) {\n        var _material$current2;\n        // If the portal renders exclusively the original scene needs to be updated\n        if (priority && ((_material$current2 = material.current) == null ? void 0 : _material$current2.blend) === 1) parent.updateWorldMatrix(true, false);\n        scene.matrixWorld.copy(parent.matrixWorld);\n      } else scene.matrixWorld.identity();\n\n      // This bit is only necessary if the portal is blended, now it has a render-priority\n      // and will take over the render loop\n      if (priority) {\n        var _material$current3, _material$current4, _material$current5;\n        if (((_material$current3 = material.current) == null ? void 0 : _material$current3.blend) > 0 && ((_material$current4 = material.current) == null ? void 0 : _material$current4.blend) < 1) {\n          // If blend is ongoing (> 0 and < 1) then we need to render both the root scene\n          // and the portal scene, both will then be mixed in the quad from above\n          blend.value = material.current.blend;\n          state.gl.setRenderTarget(buffer1);\n          state.gl.render(scene, state.camera);\n          state.gl.setRenderTarget(buffer2);\n          state.gl.render(rootScene, state.camera);\n          state.gl.setRenderTarget(null);\n          quad.render(state.gl);\n        } else if (((_material$current5 = material.current) == null ? void 0 : _material$current5.blend) === 1) {\n          // However if blend is 1 we only need to render the portal scene\n          state.gl.render(scene, state.camera);\n        }\n      }\n    }\n  }, priority);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}\nconst makeSDFGenerator = (clientWidth, clientHeight, renderer) => {\n  let finalTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.LinearMipmapLinearFilter,\n    magFilter: THREE.LinearFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat,\n    generateMipmaps: true\n  });\n  let outsideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let insideRenderTarget = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let outsideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let insideRenderTarget2 = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter\n  });\n  let outsideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  let insideRenderTargetFinal = new THREE.WebGLRenderTarget(clientWidth, clientHeight, {\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    type: THREE.FloatType,\n    format: THREE.RedFormat\n  });\n  const uvRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        uniform sampler2D tex;\n        varying vec2 vUv;\n        #include <packing>\n        void main() {\n          gl_FragColor = pack2HalfToRGBA(vUv * (round(texture2D(tex, vUv).x)));\n        }`\n  }));\n  const uvRenderInside = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        uniform sampler2D tex;\n        varying vec2 vUv;\n        #include <packing>\n        void main() {\n          gl_FragColor = pack2HalfToRGBA(vUv * (1.0 - round(texture2D(tex, vUv).x)));\n        }`\n  }));\n  const jumpFloodRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      offset: {\n        value: 0.0\n      },\n      level: {\n        value: 0.0\n      },\n      maxSteps: {\n        value: 0.0\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        varying vec2 vUv;\n        uniform sampler2D tex;\n        uniform float offset;\n        uniform float level;\n        uniform float maxSteps;\n        #include <packing>\n        void main() {\n          float closestDist = 9999999.9;\n          vec2 closestPos = vec2(0.0);\n          for (float x = -1.0; x <= 1.0; x += 1.0) {\n            for (float y = -1.0; y <= 1.0; y += 1.0) {\n              vec2 voffset = vUv;\n              voffset += vec2(x, y) * vec2(${1 / clientWidth}, ${1 / clientHeight}) * offset;\n              vec2 pos = unpackRGBATo2Half(texture2D(tex, voffset));\n              float dist = distance(pos.xy, vUv);\n              if(pos.x != 0.0 && pos.y != 0.0 && dist < closestDist) {\n                closestDist = dist;\n                closestPos = pos;\n              }\n            }\n          }\n          gl_FragColor = pack2HalfToRGBA(closestPos);\n        }`\n  }));\n  const distanceFieldRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      tex: {\n        value: null\n      },\n      size: {\n        value: new THREE.Vector2(clientWidth, clientHeight)\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        varying vec2 vUv;\n        uniform sampler2D tex;\n        uniform vec2 size;\n        #include <packing>\n        void main() {\n          gl_FragColor = vec4(distance(size * unpackRGBATo2Half(texture2D(tex, vUv)), size * vUv), 0.0, 0.0, 0.0);\n        }`\n  }));\n  const compositeRender = new FullScreenQuad(new THREE.ShaderMaterial({\n    uniforms: {\n      inside: {\n        value: insideRenderTargetFinal.texture\n      },\n      outside: {\n        value: outsideRenderTargetFinal.texture\n      },\n      tex: {\n        value: null\n      }\n    },\n    vertexShader: /*glsl*/`\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`,\n    fragmentShader: /*glsl*/`\n        varying vec2 vUv;\n        uniform sampler2D inside;\n        uniform sampler2D outside;\n        uniform sampler2D tex;\n        #include <packing>\n        void main() {\n          float i = texture2D(inside, vUv).x;\n          float o =texture2D(outside, vUv).x;\n          if (texture2D(tex, vUv).x == 0.0) {\n            gl_FragColor = vec4(o, 0.0, 0.0, 0.0);\n          } else {\n            gl_FragColor = vec4(-i, 0.0, 0.0, 0.0);\n          }\n        }`\n  }));\n  return image => {\n    let ft = finalTarget;\n    image.minFilter = THREE.NearestFilter;\n    image.magFilter = THREE.NearestFilter;\n    uvRender.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(outsideRenderTarget);\n    uvRender.render(renderer);\n    const passes = Math.ceil(Math.log(Math.max(clientWidth, clientHeight)) / Math.log(2.0));\n    let lastTarget = outsideRenderTarget;\n    let target = null;\n    for (let i = 0; i < passes; i++) {\n      const offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === outsideRenderTarget ? outsideRenderTarget2 : outsideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n    renderer.setRenderTarget(outsideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    uvRenderInside.material.uniforms.tex.value = image;\n    renderer.setRenderTarget(insideRenderTarget);\n    uvRenderInside.render(renderer);\n    lastTarget = insideRenderTarget;\n    for (let i = 0; i < passes; i++) {\n      const offset = Math.pow(2, passes - i - 1);\n      target = lastTarget === insideRenderTarget ? insideRenderTarget2 : insideRenderTarget;\n      jumpFloodRender.material.uniforms.level.value = i;\n      jumpFloodRender.material.uniforms.maxSteps.value = passes;\n      jumpFloodRender.material.uniforms.offset.value = offset;\n      jumpFloodRender.material.uniforms.tex.value = lastTarget.texture;\n      renderer.setRenderTarget(target);\n      jumpFloodRender.render(renderer);\n      lastTarget = target;\n    }\n    renderer.setRenderTarget(insideRenderTargetFinal);\n    distanceFieldRender.material.uniforms.tex.value = target.texture;\n    distanceFieldRender.render(renderer);\n    renderer.setRenderTarget(ft);\n    compositeRender.material.uniforms.tex.value = image;\n    compositeRender.render(renderer);\n    renderer.setRenderTarget(null);\n    return ft;\n  };\n};\n\nexport { MeshPortalMaterial };\n","import { Center, Text3D } from '@react-three/drei';\r\nimport { useLoader } from '@react-three/fiber';\r\nimport * as THREE from \"three\"\r\n\r\n/**\r\n * Holds the text for the project description in 3D space.\r\n * @param {string} description The children of the component, expected to be a string.\r\n * @param {*} props Additional properties passed to the component.\r\n * @returns a 3d text object component.\r\n */\r\nfunction DescriptionText3D({ description, ...props }) {\r\n    // Load 3d text matcap\r\n    const [textMatcap] = useLoader(THREE.TextureLoader, ['/matcaps/greyClay.png']);\r\n\r\n    // Format the description for 3D text\r\n    const projectDesc = wrapTextByCharCount(description);\r\n    return (\r\n        <mesh {...props} > \r\n            <boxGeometry args={[0.1,0.1,0.1]} key={`CenteringBoxGeom`} />\r\n            <meshBasicMaterial color={'#FFFFFF'} key={`CenteringBoxMat`} visible={false}  />\r\n            {/* Centered Text within box */}\r\n            <Center key={projectDesc.slice(0, 5)}>\r\n                <Text3D\r\n                    scale={0.05}\r\n                    curveSegments={5}\r\n                    height={0.5}\r\n                    lineHeight={0.75}\r\n                    letterSpacing={0}\r\n                    size={1}\r\n                    font=\"/fonts/Inter_Bold.json\"\r\n                >\r\n                    {projectDesc}\r\n                    <meshMatcapMaterial matcap={textMatcap} />\r\n                </Text3D>\r\n            </Center>\r\n        </mesh>\r\n    );\r\n}\r\n\r\nexport default DescriptionText3D;\r\n\r\n/**\r\n * Wraps the input text to a specified maximum number of characters per line, preserving whole words.\r\n *\r\n * @param {string} text - The input text to wrap.\r\n * @param {number} [maxCharsPerLine=45] - The maximum number of characters allowed per line.\r\n * @returns {string} The wrapped text with line breaks inserted to ensure no line exceeds the specified character limit.\r\n */\r\nfunction wrapTextByCharCount(text, maxCharsPerLine = 45) {\r\n    if (typeof text !== 'string') return '';\r\n\r\n    // Split text into words, append string until we reach the max length\r\n    // then start a new line. Repeat until out of words.\r\n    return text.split(' ').reduce((lines, word) => {\r\n\r\n        // Grab line to append word onto\r\n        const lastLine = lines[lines.length - 1];\r\n\r\n        // Add word if it won't overflow, otherwise start a new line\r\n        if (lastLine && (lastLine + ' ' + word).length <= maxCharsPerLine) {\r\n            lines[lines.length - 1] = lastLine + ' ' + word;\r\n        } else {\r\n            lines.push(word);\r\n        }\r\n        \r\n        return lines;\r\n    }, []).join('\\n');\r\n}","import { handleClick, animateIn, animateOut } from \"../utils/Helpers.jsx\";\r\nimport ToggleFocusButton from \"../utils/ToggleFocusButton.jsx\";\r\nimport { useFrame, useThree } from \"@react-three/fiber\";\r\nimport DescriptionText3D from \"./DescriptionText3D\";\r\nimport { folder, useControls } from \"leva\";\r\nimport TitleText3D from \"../utils/TitleText3D.jsx\";\r\nimport Logo from \"../contact/Logo.jsx\"; \r\nimport * as THREE from \"three\";\r\nimport gsap from \"gsap\";\r\nimport React, {\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport {\r\n  Environment,\r\n  Float,\r\n  MeshPortalMaterial,\r\n  Text,\r\n  useGLTF,\r\n} from \"@react-three/drei\";\r\n\r\n/**\r\n * Contains the Laptop scene used in the homepage.\r\n * @param {Object} props - The properties object.\r\n * @param {React.Ref} ref - The ref to be forwarded.\r\n * @returns {JSX.Element} Laptop scene component.\r\n */\r\nconst ProjectsScene = forwardRef((_props, ref) => {\r\n  /*\r\n   * Imports\r\n   */\r\n\r\n  // Computer model\r\n  const monitorModel = useGLTF(`/models/computer_monitor_lowpoly/monitor.glb`);\r\n\r\n  // Teeny keyboard model\r\n  const teenyBoardModel = useGLTF(\r\n    \"/models/teenyBoard/cartoon_mini_keyboard.glb\"\r\n  );\r\n\r\n  // Plant Model\r\n  const plantModel = useGLTF(\"models/plant/low_poly_style_plant.glb\");\r\n\r\n  // Box model\r\n  const { nodes } = useGLTF(\"/aobox-transformed.glb\");\r\n\r\n  // Object color palette\r\n  const [colorPalette] = useState([\r\n    \"#ae2012\",\r\n    \"#005f73\",\r\n    \"#4f772d\",\r\n    \"#43aa8b\",\r\n    \"#564592\",\r\n    \"#9c4724\",\r\n  ]);\r\n\r\n  // store projects here\r\n  const [projects] = useState([\r\n    {\r\n      name: \"EliParker.dev\",\r\n      siteReference: \"http://eliparker.dev/\",\r\n      description: \"3-D portfolio website that showcases my projects and skills. Uses React Three Fiber and React Three Drei.\",\r\n      github: \"https://github.com/Eli-Parker/eli-parker.github.io\",\r\n      chiclets: [\"React\", \"Three.js\", \"JavaScript\", \"WebGL\", \"React-Three-Fiber\", \"UI/UX Design\"],\r\n      id: 1,\r\n    },\r\n    {\r\n      name: \"RideHermes.app\",\r\n      siteReference: \"https://eliparker.dev/ride-hermes-samples/\",\r\n      description: \"PEV focused ride tracking Application with 100k+ users. I do a lot of the frontend development and implement various features.\",\r\n      github: \"\",\r\n      chiclets: [\"Flutter\", \"Dart\", \"UI/UX Design\", \"App Development\"],\r\n      id: 2,\r\n    },\r\n    {\r\n      name: \"Spreadsheet\",\r\n      siteReference: \"https://eliparker.dev/CS3500SpreadsheetGUI/\",\r\n      description: \"Full Stack spreadsheet application with a Blazor frontend and C# backend. Implements a custom formula language with support for recursion, cell references, and built-in formulas.\",\r\n      github: \"\",\r\n      chiclets: [\"C#\", \"Blazor\", \"UI/UX Design\", \"Fullstack Development\"],\r\n      id: 2,\r\n    },\r\n    {\r\n      name: \"University Calendar Generator\",\r\n      siteReference: \"http://eliparker.dev/UniversityOfUtahCalendarGenerator\",\r\n      description: \"Scrapes the University of Utah's academic calendar website and dynamically generates an iCal file, based on user selection.\",\r\n      github: \"https://github.com/Eli-Parker/UniversityOfUtahCalendarGenerator\",\r\n      chiclets: [\"C#\", \"Web Scraping\", \"HTML\", \"JavaScript\"],\r\n      id: 3,\r\n    },\r\n    {\r\n      name: \"Text Generation Algorithm\",\r\n      siteReference: \"\",\r\n      description: \"Java program that dynamically generates text based on a given input text. Based on Markov Chains. (Code is available to employers upon request, but cannot be public.)\",\r\n      github: \"\",\r\n      chiclets: [\"Java\", \"Algorithms\", \"Data Structures\", \"Machine Learning\"],\r\n      id: 4,\r\n    },\r\n    {\r\n      name: \"Galaxy Generator\",\r\n      siteReference: \"http://eliparker.dev/Galaxy-Generator\",\r\n      description: \"Three-js project that uses particles and complex math to generate an interactive galaxy.\",\r\n      github: \"https://github.com/Eli-Parker/Galaxy-Generator\",\r\n      chiclets: [\"JavaScript\", \"Three.js\", \"WebGL\", \"Algorithms\"],\r\n      id: 5,\r\n    },\r\n    {\r\n      name: \"React Site\",\r\n      siteReference: \"http://eliparker.dev/react-site/\",\r\n      description: \"A small portfolio website to get things started! Built with React and hosted on GitHub Pages.\",\r\n      github: \"https://github.com/Eli-Parker/react-site\",\r\n      chiclets: [\"React\", \"JavaScript\", \"Tailwind CSS\", \"HTML\"],\r\n      id: 6,\r\n    },\r\n  ]);\r\n\r\n  // State of properties\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  // Whether portal (and its heavy internal content) should be mounted\r\n  const [portalActive, setPortalActive] = useState(false);\r\n\r\n  // Scene reference\r\n  const scene = useRef();\r\n  const { camera } = useThree();\r\n\r\n  // Reference to logos\r\n  const githubLogoRef = useRef();\r\n  const siteLogoRef = useRef();\r\n\r\n  // Animate logos\r\n  useFrame((state) => {\r\n    // Animate only if the scene is visible\r\n    if (scene.current.visible) {\r\n      // Animate the logos if they exist\r\n      if (githubLogoRef.current) {\r\n        githubLogoRef.current.position.y =\r\n          0.01 * Math.sin(state.clock.getElapsedTime() * 1.8) - 0.35; // Adjust the rotation speed as needed\r\n      }\r\n      if (siteLogoRef.current) {\r\n        siteLogoRef.current.position.y =\r\n          0.01 * Math.cos(state.clock.getElapsedTime() * 1.75) - 0.35; // Adjust the rotation speed as needed\r\n      }\r\n    }\r\n  });\r\n\r\n  // Forwarding the ref, used to trigger animations in experience.jsx\r\n  useImperativeHandle(ref, () => ({\r\n    // Used to tell whether the scene is hidden or not\r\n    scale: scene.current.scale,\r\n\r\n    /** Toggle the in/out animation */\r\n    toggleAnimateOut: () => {\r\n      toggleAnimation(scene, camera, isAnimating, setIsAnimating, {\r\n        onOpenStart: () => setPortalActive(true),\r\n        onCloseComplete: () => setPortalActive(false),\r\n      });\r\n    },\r\n\r\n    /**  Toggle scene vis without the animation*/\r\n    toggleOut: () => {\r\n      const opening = scene.current.scale.x === 0; // if currently closed, we'll open\r\n      if (opening) {\r\n        setPortalActive(true);\r\n      }\r\n      ToggleNoAnimation(scene, isAnimating, setIsAnimating);\r\n      if (!opening) {\r\n        // just closed\r\n        setPortalActive(false);\r\n      }\r\n    },\r\n  }));\r\n\r\n  /*\r\n   * Leva controls\r\n   */\r\n  const {\r\n        sp_x, sp_y, sp_z,\r\n        sr_x, sr_y, sr_z,\r\n        MonitorX, MonitorY, scale,\r\n        portalX, portalY, portalZ, portalScale,\r\n        KbrdX, KbrdY, KbrdZ, KbrdScl,\r\n        PlntX, PlntY, PlntZ, PlntScl,\r\n    } = useControls(\r\n    \"Projects Scene\",\r\n    {\r\n        \"Scene Position\": folder(\r\n            { sp_x: 0.0, sp_y: -0.15, sp_z: -0.2 },\r\n            { collapsed: true }\r\n        ),\r\n\r\n      \"Scene rotation\": folder(\r\n        { sr_x: -0.1177, sr_y: -0.0544, sr_z: -0 },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Monitor Ctrls\": folder(\r\n        {\r\n          MonitorX: { value: 0, step: 0.01 },\r\n          MonitorY: { value: -0.28, step: 0.01 },\r\n          scale: { value: 0.5, step: 0.01 },\r\n        },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"teenyBoard Ctrls\": folder(\r\n        {\r\n          KbrdX: { value: 0, step: 0.01 },\r\n          KbrdY: { value: -0.3, step: 0.01 },\r\n          KbrdZ: { value: 0.57, step: 0.01 },\r\n          KbrdScl: { value: 0.0036, step: 0.0001 },\r\n        },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Plant Ctrls\": folder(\r\n        {\r\n          PlntX: { value: -1.19, step: 0.01 },\r\n          PlntY: { value: -0.31, step: 0.01 },\r\n          PlntZ: { value: -0.07, step: 0.01 },\r\n          PlntScl: { value: 0.00106, step: 0.00001 },\r\n        },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      \"Portal Ctrls\": folder(\r\n        {\r\n          portalX: { value: 0, step: 0.01 },\r\n          portalY: { value: 1.45, step: 0.01 },\r\n          portalZ: { value: -0.22, step: 0.001 },\r\n          portalScale: { value: 1.89, step: 0.01 },\r\n        },\r\n        { collapsed: true }\r\n      ),\r\n\r\n      projectNum: {\r\n        value: 0,\r\n        min: 0,\r\n        max: 5,\r\n        step: 1,\r\n        onChange: (v) => {\r\n          setProjectNumber(v);\r\n        },\r\n      },\r\n    },\r\n    { collapsed: true }\r\n  );\r\n\r\n  /**\r\n   * Lets the setProjNum method know if its been called recently,\r\n   * to prevent users from spamming the change projects buttons.\r\n   */\r\n  const [projectButtonCooldown, setProjectButtonCooldown] = useState(false);\r\n\r\n  /**\r\n   * Sets the project number to the given project number, with checks to make sure it doesn't go out of bounds\r\n   * @param {*} number the proj number to set\r\n   */\r\n  async function setProjNum(number) {\r\n    // Don't reset number if we're on cooldown\r\n    if (projectButtonCooldown) return;\r\n\r\n    // Make sure the buttons cant be spammed\r\n    setProjectButtonCooldown(true);\r\n\r\n    const min = 0;\r\n    const max = projects.length;\r\n\r\n    // Format number for infinite scrolling of projects\r\n    let formattedNumber = number % max;\r\n\r\n    // Wrap around number if it's below 0\r\n    if (formattedNumber === -1) {\r\n      formattedNumber = max - 1;\r\n    }\r\n\r\n    // Set number\r\n    setProjectNumber(formattedNumber);\r\n\r\n    // Wait half a second\r\n    await new Promise((resolve) => setTimeout(resolve, 500));\r\n\r\n    // Allow button to be pressed again\r\n    setProjectButtonCooldown(false);\r\n  }\r\n\r\n  /*\r\n   * Project variables\r\n   */\r\n  const [projectNumber, setProjectNumber] = useState(0);\r\n  const [projectTitle, setProjTitle] = useState(\r\n    projects[projectNumber].name\r\n  );\r\n  const [projectDesc, setProjDesc] = useState(\r\n    projects[projectNumber].description\r\n  );\r\n  const [projectSite, setProjSite] = useState(\r\n    projects[projectNumber].siteReference\r\n  );\r\n  const [projectGitHub, setProjGitHub] = useState(\r\n    projects[projectNumber].github\r\n  );\r\n\r\n  // Update them when the project number changes\r\n  useEffect(() => {\r\n    setProjTitle(projects[projectNumber].name);\r\n    setProjDesc(projects[projectNumber].description);\r\n    setProjSite(projects[projectNumber].siteReference);\r\n    setProjGitHub(projects[projectNumber].github);\r\n  }, [projectNumber]);\r\n\r\n  // Site and Github positions, here to center the icon if the other icon doesn't exist\r\n  const [githubPositionX, setGithubPositionX] = useState(-0.3);\r\n  const [sitePositionX, setSitePositionX] = useState(0.3);\r\n\r\n  // UseEffect to update the positions of the logos whenever they change\r\n\r\n  /* This is a separate useEffect because it doesn't detect properly\r\n   * when grouped with above useEffect, or when using\r\n   * projectNumber as the effect change value\r\n   */\r\n  useEffect(() => {\r\n    // Update logo positions based on the presence of the other model\r\n    if (projectGitHub !== \"\" && projectSite !== \"\") {\r\n      setGithubPositionX(-0.3);\r\n      setSitePositionX(0.3);\r\n    } else if (projectGitHub !== \"\") {\r\n      setGithubPositionX(0);\r\n    } else if (projectSite !== \"\") {\r\n      setSitePositionX(0);\r\n    }\r\n    // If neither are here do nothing, positions of objects that aren't visible don't matter\r\n  }, [projectGitHub]);\r\n\r\n  // Tracks if a component was clicked recently, prevents spamming\r\n  const [recentClick, setRecentClick] = useState(false);\r\n\r\n  // State for focusing the arrows\r\n  const [focusedLogo, setFocusedLogo] = useState(\"start\");\r\n\r\n  const rightArrow = useRef()\r\n  const leftArrow = useRef()\r\n\r\n  // Change animations when logo is focused\r\n  useEffect(() => {\r\n    switch (focusedLogo) {\r\n      case \"none\":\r\n        animateOut([leftArrow, rightArrow]);\r\n        break;\r\n\r\n      case \"left\":\r\n        animateOut([rightArrow]);\r\n        animateIn([leftArrow]);\r\n        break;\r\n        \r\n      case \"right\":\r\n        animateOut([leftArrow]);\r\n        animateIn([rightArrow]);\r\n      default:\r\n        break;\r\n        \r\n    }\r\n  }, [focusedLogo]);\r\n\r\n  // START OF COMPONENTS (here for legibility) ***********\r\n  return (\r\n    <group\r\n      key={\"FullProjectScene\"}\r\n      ref={scene}\r\n      // Start hidden so it doesn't pop in when the component resolves from Suspense\r\n      scale={0}\r\n      visible={false}\r\n      position={[sp_x, sp_y, sp_z]}\r\n      rotation={[sr_x, Math.PI - sr_y, sr_z]}\r\n    >\r\n      <Float rotationIntensity={0.4} floatIntensity={0.1}>\r\n        {/* Monitor model */}\r\n        <primitive\r\n          key={`projectMonitor`}\r\n          object={monitorModel.scene}\r\n          position={[MonitorX, MonitorY, 0]}\r\n          scale={scale}\r\n          textAlign=\"center\"\r\n        >\r\n          {/* Monitor Portal - mounted only when portalActive */}\r\n          {portalActive && (\r\n            <mesh\r\n              key={`monitorPortal`}\r\n              position={[portalX, portalY, portalZ]}\r\n              scale={portalScale}\r\n            >\r\n              <planeGeometry key={`monitorPortalPlane`} args={[2, 1]} />\r\n              <MeshPortalMaterial key={`monitorPortalMat`}>\r\n                {/* Portal lighting */}\r\n                <ambientLight intensity={0.5} key={`monitorPortalAmbLi`} />\r\n                <Environment preset=\"city\" key={`monitorPortalEnv`} />\r\n                {/* Inner box */}\r\n                <mesh\r\n                  castShadow\r\n                  receiveShadow\r\n                  rotation-y={-Math.PI * 0.5}\r\n                  geometry={nodes.Cube.geometry}\r\n                  scale-y={0.5}\r\n                  scale-x={0.5}\r\n                  key={`innerBox`}\r\n                >\r\n                  <meshStandardMaterial\r\n                    color={colorPalette[projectNumber % 6]}\r\n                    key={`innerBoxMat`}\r\n                  />\r\n                  <spotLight\r\n                    castShadow\r\n                    color={colorPalette[projectNumber % 6]}\r\n                    intensity={2}\r\n                    position={[10, 10, 10]}\r\n                    angle={0.15}\r\n                    penumbra={1}\r\n                    shadow-normalBias={0.05}\r\n                    shadow-bias={0.0001}\r\n                    key={`innerBoxSpotLight`}\r\n                  />\r\n                </mesh>\r\n                {/* Title 3D Text */}\r\n                <TitleText3D title={projectTitle} position={[0, 0.35, -0.1]} />\r\n                {/* Description 3D Text */}\r\n                <DescriptionText3D\r\n                  position={[0, 0, -0.25]}\r\n                  description={projectDesc}\r\n                />\r\n                {/* Arrows to toggle between projects */}\r\n                <TitleText3D\r\n                  ref={leftArrow}\r\n                  title={\"←\"}\r\n                  useNormal\r\n                  position={[-0.9, 0, -0.2]}\r\n                  onClick={() => {\r\n                    setProjNum(projectNumber - 1);\r\n                  }}\r\n                  onPointerEnter={() => setFocusedLogo(\"left\")}\r\n                  onPointerLeave={() => setFocusedLogo(\"none\")}\r\n                />\r\n                <TitleText3D\r\n                  ref={rightArrow}\r\n                  title={\"→\"}\r\n                  useNormal\r\n                  position={[0.9, 0, -0.2]}\r\n                  onClick={() => {\r\n                    setProjNum(projectNumber + 1);\r\n                  }}\r\n                  onPointerEnter={() => setFocusedLogo(\"right\")}\r\n                  onPointerLeave={() => setFocusedLogo(\"none\")}\r\n                />\r\n                {/* GitHub reference link */}\r\n                <Logo\r\n                  ref={githubLogoRef}\r\n                  key={`githubRef`}\r\n                  kind=\"github\"\r\n                  position={[githubPositionX, -0.35, -0.2]}\r\n                  rotation={[0, Math.PI / 2, 0]}\r\n                  scale={0.3}\r\n                  visible={projectGitHub !== \"\"}\r\n                  onClick={() => handleClick(projectGitHub, recentClick, setRecentClick)}\r\n                />\r\n                {/* Site reference link */}\r\n                <Logo\r\n                  ref={siteLogoRef}\r\n                  key={`siteref`}\r\n                  kind=\"website\"\r\n                  position={[sitePositionX, -0.35, -0.2]}\r\n                  rotation={[0, Math.PI / 2, 0]}\r\n                  scale={0.3}\r\n                  visible={projectSite !== \"\"}\r\n                  onClick={() => handleClick(projectSite, recentClick, setRecentClick)}\r\n                />\r\n              </MeshPortalMaterial>\r\n            </mesh>\r\n          )}\r\n        </primitive>\r\n\r\n        {/* Projects title */}\r\n        <Text\r\n          font={\"./fonts/anek-bangla-v5-latin-600.woff\"}\r\n          fontSize={0.3}\r\n          position={[1.4, 0.5, 0.4]}\r\n          rotation-y={-1}\r\n          rotation-z={0}\r\n          maxWidth={2}\r\n          lineHeight={1}\r\n          color=\"#87ceeb\"\r\n        >\r\n          Projects\r\n        </Text>\r\n\r\n        {/* Focus button */}\r\n        <ToggleFocusButton scale={0.5} rotation={[-0.3,0,0]} position={[0,-0.23,-0.1]} page={'projects'} />\r\n\r\n        {/* Plant */}\r\n        <primitive\r\n          key={\"projectPlant\"}\r\n          object={plantModel.scene}\r\n          position={[PlntX, PlntY, PlntZ]}\r\n          scale={PlntScl}\r\n        />\r\n\r\n        {/* Teeny Board */}\r\n        {/* Put teeny board in a different float so it feels separated from the rest of the scene */}\r\n        <Float rotationIntensity={0.4} floatIntensity={0}>\r\n          <primitive\r\n            key={`projectTeenyBoard`}\r\n            object={teenyBoardModel.scene}\r\n            position={[KbrdX, KbrdY, KbrdZ]}\r\n            scale={KbrdScl}\r\n          />\r\n        </Float>\r\n      </Float>\r\n    </group>\r\n  );\r\n});\r\n\r\nexport default ProjectsScene;\r\n\r\n// Preload heavy assets so switching to Projects later is instant\r\nuseGLTF.preload('/models/computer_monitor_lowpoly/monitor.glb');\r\nuseGLTF.preload('/models/teenyBoard/cartoon_mini_keyboard.glb');\r\nuseGLTF.preload('models/plant/low_poly_style_plant.glb');\r\nuseGLTF.preload('/aobox-transformed.glb');\r\n\r\n\r\n/**\r\n * Toggles the animation in and out for the scene.\r\n * @param {Object} scene The scene to animate\r\n * @param {THREE.Camera} camera the scene camera, used in GSAP animations\r\n * @param {boolean} isAnimating The state of the animation\r\n * @param {Function} setIsAnimating The function to set the state of the animation\r\n */\r\nfunction toggleAnimation(scene, camera, isAnimating, setIsAnimating, callbacks = {}) {\r\n  // stop animation from being called multiple times\r\n  if (isAnimating) {\r\n    return;\r\n  }\r\n\r\n  // Set the state to animating\r\n  setIsAnimating(true);\r\n\r\n  // Toggle visibility\r\n  scene.current.visible = true;\r\n\r\n  // Toggle scale\r\n  const opening = scene.current.scale.x === 0; // we'll open if currently closed\r\n  const targetScale = opening ? { x: 2, y: 2, z: 2 } : { x: 0, y: 0, z: 0 };\r\n\r\n  // Target rotation\r\n  const targetRotation = opening ? -0.1575 : Math.PI - 0.1575;\r\n\r\n  // If we are opening and have a callback, announce start so portal can mount before first rendered frame\r\n  if (opening && callbacks.onOpenStart) callbacks.onOpenStart();\r\n\r\n  // Animate the scale\r\n  gsap.to(scene.current.scale, {\r\n    duration: 0.5,\r\n    x: targetScale.x,\r\n    y: targetScale.y,\r\n    z: targetScale.z,\r\n    ease: \"power2.inOut\",\r\n    onUpdate: () => {\r\n      camera.updateProjectionMatrix();\r\n    },\r\n    // Hide the scene when the animation is complete\r\n    onComplete: () => {\r\n      if (!opening) {\r\n        scene.current.visible = false;\r\n        if (callbacks.onCloseComplete) callbacks.onCloseComplete();\r\n      }\r\n      setIsAnimating(false);\r\n    },\r\n  });\r\n\r\n  // Animate the rotation\r\n  gsap.to(scene.current.rotation, {\r\n    duration: 0.5,\r\n    y: targetRotation,\r\n    ease: \"power2.inOut\",\r\n    onUpdate: () => {\r\n      camera.updateProjectionMatrix();\r\n    },\r\n    onComplete: () => {\r\n      setIsAnimating(false);\r\n    },\r\n  });\r\n}\r\n\r\n/**\r\n * Toggles the scene without the animation.\r\n * @param {Object} scene the scene to toggle\r\n * @param {boolean} isAnimating The state of the animation\r\n * @param {Function} setIsAnimating Function to set the state of the animation\r\n */\r\nfunction ToggleNoAnimation(scene, isAnimating, setIsAnimating) {\r\n  // stop animation from being called multiple times\r\n  if (isAnimating) {\r\n    return;\r\n  }\r\n\r\n  // Set the state to animating\r\n  setIsAnimating(true);\r\n\r\n  // Toggle visibility\r\n  scene.current.visible = true;\r\n\r\n  // Toggle scale\r\n  if (scene.current.scale.x > 0) {\r\n    scene.current.scale.x = 0;\r\n    scene.current.scale.y = 0;\r\n    scene.current.scale.z = 0;\r\n\r\n    // If the scale is 0, hide the scene\r\n    scene.current.visible = false;\r\n  } else {\r\n    scene.current.scale.x = 2;\r\n    scene.current.scale.y = 2;\r\n    scene.current.scale.z = 2;\r\n  }\r\n\r\n  // Set the state to not animating\r\n  setIsAnimating(false);\r\n}\r\n"],"names":["__defProp","__defNormalProp","obj","key","value","__publicField","FullScreenQuad","material","OrthographicCamera","PlaneGeometry","Mesh","renderer","shaderMaterial","uniforms","vertexShader","fragmentShader","onInit","THREE.ShaderMaterial","parameters","entries","acc","name","uniform","THREE.UniformsUtils","v","THREE.MathUtils","getVersion","REVISION","version","useFBO","width","height","settings","size","useThree","state","viewport","_width","_height","_settings","samples","depth","targetSettings","target","React.useMemo","THREE.WebGLRenderTarget","THREE.LinearFilter","THREE.HalfFloatType","THREE.DepthTexture","THREE.FloatType","React.useLayoutEffect","React.useEffect","useIntersect","onChange","ref","React.useRef","check","temp","callback","unsub1","addEffect","oldOnRender","unsub2","addAfterEffect","RenderTexture","React.forwardRef","children","compute","renderPriority","eventPriority","frames","stencilBuffer","depthBuffer","generateMipmaps","props","forwardRef","fbo","vScene","React.useState","THREE.Scene","uvCompute","React.useCallback","event","previous","_fbo$texture","_previous$previousRoo","parent","THREE.Object3D","intersection","uv","React.useImperativeHandle","React.createElement","React.Fragment","createPortal","Container","_extends","count","oldAutoClear","oldXrEnabled","oldRenderTarget","oldIsPresenting","useFrame","PortalMaterialImpl","THREE.Vector2","MeshPortalMaterial","events","blur","worldUnits","resolution","fref","extend","scene","gl","setEvents","maskRenderTarget","priority","setPriority","p","visible","setVisible","_ref$current","tempMesh","THREE.Mesh","THREE.MeshBasicMaterial","boundingBox","THREE.Box3","orthoCam","THREE.OrthographicCamera","sdf","makeSDFGenerator","readSdf","min","i","_ref$current2","ManagePortalScene","rootScene","buffer1","buffer2","quad","blend","_material$current","_material$current2","_material$current3","_material$current4","_material$current5","clientWidth","clientHeight","finalTarget","THREE.LinearMipmapLinearFilter","THREE.RedFormat","outsideRenderTarget","THREE.NearestFilter","insideRenderTarget","outsideRenderTarget2","insideRenderTarget2","outsideRenderTargetFinal","insideRenderTargetFinal","uvRender","uvRenderInside","jumpFloodRender","distanceFieldRender","compositeRender","image","ft","passes","lastTarget","offset","DescriptionText3D","description","textMatcap","useLoader","THREE.TextureLoader","projectDesc","wrapTextByCharCount","jsxs","jsx","Center","Text3D","text","maxCharsPerLine","lines","word","lastLine","ProjectsScene","_props","monitorModel","useGLTF","teenyBoardModel","plantModel","nodes","colorPalette","useState","projects","isAnimating","setIsAnimating","portalActive","setPortalActive","useRef","camera","githubLogoRef","siteLogoRef","useImperativeHandle","toggleAnimation","opening","ToggleNoAnimation","sp_x","sp_y","sp_z","sr_x","sr_y","sr_z","MonitorX","MonitorY","scale","portalX","portalY","portalZ","portalScale","KbrdX","KbrdY","KbrdZ","KbrdScl","PlntX","PlntY","PlntZ","PlntScl","useControls","folder","setProjectNumber","projectButtonCooldown","setProjectButtonCooldown","setProjNum","number","max","formattedNumber","resolve","projectNumber","projectTitle","setProjTitle","setProjDesc","projectSite","setProjSite","projectGitHub","setProjGitHub","useEffect","githubPositionX","setGithubPositionX","sitePositionX","setSitePositionX","recentClick","setRecentClick","focusedLogo","setFocusedLogo","rightArrow","leftArrow","animateOut","animateIn","Float","Environment","TitleText3D","Logo","handleClick","Text","ToggleFocusButton","callbacks","targetScale","targetRotation","gsap"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}